<!DOCTYPE html>

<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link href="~/fade.css" rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'"/>
@using Umbraco.Cms.Web.Common.PublishedModels;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using UmbracoTestTask.Models;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.HomePage>
@{
    int linkscount = 3;
    <header class="container">
        <div class="row row-cols-auto">
            <div class="col">
                <h1>LOGOTYPE</h1>
            </div>
            <div class="row row-cols-auto">
            @for (int i = 1; i <= linkscount; i++)
            {
                <div class="col" style="margin: auto 0">
                    <a class="breadcrumb-item" href="/" style="height: 100%;font-size: 2ch">Home @i</a>
                </div>
                @if (i < linkscount)
                {
                    <div class="col" style="margin: auto 0">
                        |
                    </div>
                }
            }
            </div>
        </div>
    </header>
    <hr />
    <main class="container">
    @await Umbraco.RenderMacroAsync("LoginForm")
    </main>
    
    @if (Model._IsLogged)
    {
        <div aria-live="polite" aria-atomic="true" class="d-flex justify-content-center align-items-center w-100">
            <div class="toast show align-items-center text-white @(Model._Answer != string.Empty ? "bg-success" : "bg-danger") fade-in" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        @if (Model._Answer != string.Empty)
                        {
                            GetEntityPretty(Model.model);
                        }
                        else
                        {
                            <span>Error</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    void GetEntityPretty(EntityModel _model)
    {
        <p>
        @foreach (var prop in _model.GetType().GetProperties())
        {
                <div>@prop.Name: @prop.GetValue(_model)</div>
        }
        </p>
    }
}